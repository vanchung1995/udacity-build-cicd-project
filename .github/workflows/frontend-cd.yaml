name: frontend-cd workflow

on:
  push:
    branches:
      - master
    paths:
      - starter/frontend/**
      - .github/workflows/frontend-cd.yaml
  workflow_dispatch:

jobs:
  lint-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '18.14'

      - name: Cache
        uses: actions/cache@v4.1.1
        with:
          path: ./starter/frontend/node_modules
          key: lint-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        working-directory: starter/frontend
        run: | 
          npm ci

      - name: Run Lint
        working-directory: starter/frontend
        run: | 
          npm run lint

  test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '18.14'

      - name: Cache
        uses: actions/cache@v4.1.1
        with:
          path: ./starter/frontend/node_modules
          key: test-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        working-directory: starter/frontend
        run: | 
          npm ci

      - name: Run Test
        working-directory: starter/frontend
        run: | 
          npm run test

  build-job:
    needs: [lint-job, test-job]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get timestamp
        id: get-timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

      - name: Get commit hash
        id: get-commit-hash
        run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"

      - name: Build and upload image to ECR
        uses: appleboy/docker-ecr-action@master
        id: build-image
        env:
          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ vars.REGISTRY }}
          tags: "latest, ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}"
          repo: ${{ vars.REPO_FRONTEND }}
          region: us-east-1
          dockerfile: starter/frontend/Dockerfile
          context: starter/frontend
          cache_from: "${{ vars.REGISTRY }}/${{ vars.REPO_FRONTEND }}:latest"
          build_args: "REACT_APP_MOVIE_API_URL=${{ vars.REACT_APP_MOVIE_API_URL }}"
          run: | 
             echo "::set-output name=IMAGE_TAG::${{env.IMAGE_TAG}}"
    outputs:
      IMAGE_TAG: ${{ steps.build-image.outputs.IMAGE_TAG }}

  deploy-job:
    needs: [build-job]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Kustomize
        uses: syntaqx/setup-kustomize@v1
        with:
          kustomize-version: 5.0.1

      - name: setup aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
      - name: eks update config kube
        run: | 
          aws eks update-kubeconfig --region us-east-1 --name ${{vars.CLUSTER}}

      - name: deploy new image use new image
        working-directory: starter/frontend/k8s
        env:
          IMAGE_URL: ${{ vars.REGISTRY }}/${{ vars.REPO_FRONTEND }}:${{needs.build-job.outputs.IMAGE_TAG}}
        run: | 
          kustomize edit set image frontend=${{env.IMAGE_URL}} && kustomize build | kubectl apply -f -

      - name: export frontend url to variable
        run: | 
          FRONTEND_URL=$(kubectl get svc frontend -o jsonpath='{.status.loadBalancer.ingress[0].hostname}:{.spec.ports[0].port}')
          && echo "FRONTEND URL: $FRONTEND_URL"
