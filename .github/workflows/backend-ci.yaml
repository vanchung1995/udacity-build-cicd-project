name: backend-ci workflow

on:
  push:
    branches:
      - 'master'
    paths:
      - starter/backend/**
      - .github/workflows/backend-ci.yaml
  pull_request:
    paths:
      - starter/backend/**
      - .github/workflows/backend-ci.yaml
  workflow_dispatch:

jobs:
  lint-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python and pipenv
        uses: palewire/install-python-pipenv-pipfile@v3
        with:
          python-version: '3.10'

      - name: Cache
        uses: actions/cache@v4.1.1
        with:
          path: ./starter/backend/
          key: lint-${{ runner.os }}-node-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install Dependencies
        working-directory: starter/backend
        run: | 
          pipenv install

      - name: Run Lint
        working-directory: starter/backend
        run: | 
          pipenv run lint

  test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python and pipenv
        uses: palewire/install-python-pipenv-pipfile@v3
        with:
          python-version: '3.10'

      - name: Cache
        uses: actions/cache@v4.1.1
        with:
          path: ./starter/backend/
          key: test-${{ runner.os }}-node-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install Dependencies
        working-directory: starter/backend
        run: | 
          pipenv install

      - name: Run Test
        working-directory: starter/backend
        run: | 
          pipenv run test

  build-job:
    needs: [lint-job, test-job]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get timestamp
        id: get-timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

      - name: Get commit hash
        id: get-commit-hash
        run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"

      # - name: Build and upload image to ECR
      #   uses: appleboy/docker-ecr-action@master
      #   with:
      #     access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     registry: ${{ vars.REGISTRY }}
      #     tags: "latest, ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}"
      #     repo: ${{ vars.REPO_FRONTEND }}
      #     region: us-east-1
      #     dockerfile: starter/frontend/Dockerfile
      #     context: starter/frontend
